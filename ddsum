#!/usr/bin/python

import sys

if __name__ == "__main__":
	from optparse import OptionParser
	parser = OptionParser(usage="usage: %prog [OPTION] [infile [outfile]]", version="%prog 4")
	parser.add_option("-b", "--blocksize", action="store", type="int", dest="bytes", default=4096, help="read and write BYTES bytes at a time")
	parser.add_option("-H", "--hash", action="store", dest="hash", default="sha1", help="FIPS secure hash algorithm to use (default: sha1)")
	parser.add_option("--devnull", action="store_true", dest="devnull", default=False, help="Just hash the data and then throw it away")
	(opts, args) = parser.parse_args()

	largs = len(args)

	if largs > 2 or (opts.devnull and largs > 1):
		parser.print_usage()
		sys.exit(1)

	try:
		import hashlib
	except ImportError:
		if opts.hash == "md5":
			import md5
			hashfunc = md5.new()
		elif opts.hash == "sha1":
			import sha
			hashfunc = sha.new()
		else:
			print >>sys.stderr, "%s: unsupported hash type" % sys.argv[0], opts.hash
			print >>sys.stderr, "\navailable hashes: md5, sha1"
			sys.exit(1)
	else:
		try:
			hashfunc = hashlib.new(opts.hash)
		except ValueError, e:
			print >>sys.stderr, "%s:" % sys.argv[0], e

			if hasattr(hashlib, 'algorithms'):
				print >>sys.stderr, "\navailable hashes:", ", ".join(hashlib.algorithms)

			sys.exit(1)

	filename = "-"

	if largs != 0 and args[0] != "-":
		try:
			sys.stdin = open(args[0], "rb")
		except Exception, e:
			print >>sys.stderr, "%s:" % sys.argv[0], e
			sys.exit(1)
	
		filename = args[0]
	
	if not opts.devnull and largs == 2 and args[1] != "-":
		try:
			sys.stdout = open(args[1], "wb")
		except Exception, e:
			print >>sys.stderr, "%s:" % sys.argv[0], e
			sys.exit(1)

		if args[1] != "-":
			filename = args[1]

	while True:
		data = sys.stdin.read(opts.bytes)

		if not data:
			break

		hashfunc.update(data)
		if not opts.devnull:
			sys.stdout.write(data)

	print >>sys.stderr, "%s *%s" % (hashfunc.hexdigest(), filename)



